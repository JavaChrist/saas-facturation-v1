import { initializeApp, getApps } from "firebase/app";
import { getAuth } from "firebase/auth";
import { 
  getFirestore, 
  connectFirestoreEmulator,
  enableNetwork,
  disableNetwork,
  type Firestore
} from "firebase/firestore";
import { getStorage } from "firebase/storage";

// Utilisation des variables d'environnement pour la configuration
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};

// Initialisation de Firebase - S'assurer qu'une seule instance est cr√©√©e
const app = getApps().length > 0 ? getApps()[0] : initializeApp(firebaseConfig);

// Configuration simplifi√©e de Firestore
const firestoreDB = getFirestore(app);

// Ajuster des param√®tres d'exploitation
let firebaseDiagnostic = "‚úì Configuration standard";

// Enregistrer des m√©triques pour debug en production
if (typeof window !== "undefined") {
  // Ne pas utiliser onSnapshot(), mais uniquement get()
  try {
    // Mesurer le temps d'acc√®s √† Firestore
    window.addEventListener('load', () => {
      console.log("üìä Diagnostic Firebase d√©marr√©");
      // Information de diagnostic
      console.log(`üîë Projet Firebase: ${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID}`);
      console.log(`üîë Auth Domain: ${process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}`);
      
      // V√©rifier l'√©tat de la connexion
      console.log("üåê √âtat de la connexion: " + (navigator.onLine ? "En ligne" : "Hors ligne"));
    });
    
    firebaseDiagnostic = "‚úì Diagnostic activ√©";
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur de configuration diagnostic:", err);
  }
  
  // G√©rer les √©v√©nements de connexion/d√©connexion au r√©seau
  window.addEventListener('online', () => {
    try {
      console.log("üåê Connexion internet d√©tect√©e, r√©tablissement de Firestore");
      enableNetwork(firestoreDB).catch(e => {
        console.warn("Erreur enableNetwork:", e);
      });
    } catch (e) {
      console.warn("‚ö†Ô∏è Erreur lors de la r√©activation du r√©seau Firestore", e);
    }
  });

  window.addEventListener('offline', () => {
    try {
      console.log("üì¥ D√©connexion internet d√©tect√©e, mise en veille de Firestore");
      disableNetwork(firestoreDB).catch(e => {
        console.warn("Erreur disableNetwork:", e);
      });
    } catch (e) {
      console.warn("‚ö†Ô∏è Erreur lors de la mise en veille du r√©seau Firestore", e);
    }
  });
}

// Exportation des services Firebase
export const db = firestoreDB;
export const auth = getAuth(app);
export const storage = getStorage(app);

console.log(`Firebase initialis√©: ${firebaseDiagnostic}`);

// Connecter √† l'√©mulateur Firestore en mode d√©veloppement
if (process.env.NODE_ENV === 'development' && typeof window !== "undefined" && process.env.NEXT_PUBLIC_USE_EMULATOR === 'true') {
  try {
    connectFirestoreEmulator(db, 'localhost', 8080);
    console.log("‚úÖ Connect√© √† l'√©mulateur Firestore local");
  } catch (error) {
    console.error("‚ùå Erreur de connexion √† l'√©mulateur Firestore:", error);
  }
}
