rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Fonction pour vérifier si l'utilisateur est le propriétaire
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Règle générale - par défaut tout est refusé
    match /{document=**} {
      allow read, write: if false;
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Règles pour la collection factures
    match /factures/{factureId} {
      allow read, update, delete: if isAuthenticated() && 
                                   request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
    }

    // Règles pour la collection clients
    match /clients/{clientId} {
      allow read, update, delete: if isAuthenticated() && 
                                  request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
    }

    // Règles pour la collection facturesRecurrentes
    match /facturesRecurrentes/{factureId} {
      allow read, update, delete: if isAuthenticated() && 
                                  request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
    }

    // Règles pour la collection modelesFacture
    match /modelesFacture/{modeleId} {
      allow read, update, delete: if isAuthenticated() && 
                                  request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
    }

    // Règles pour la collection notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                  request.auth.uid == resource.data.userId;
      allow create, update, delete: if isAuthenticated() &&
                                   (request.auth.uid == resource.data.userId ||
                                    (request.resource.data != null && 
                                     request.auth.uid == request.resource.data.userId));
    }

    // Règles pour la collection organizations ou organizations
    match /organizations/{orgId} {
      allow read, update, delete: if isAuthenticated() && 
                                 request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
    }
    
    // Alias pour éviter les erreurs de nom (organizations vs organisations)
    match /organisations/{orgId} {
      allow read, update, delete: if isAuthenticated() && 
                                 request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
    }

    // Règles pour la collection contactRequests
    match /contactRequests/{requestId} {
      // Seul l'administrateur peut lire les demandes 
      // Utiliser l'adresse email vérifiée pour identification
      allow read: if isAuthenticated() && 
                  request.auth.token.email == "support@javachrist.fr";
      
      // Permettre à tout utilisateur (même non authentifié) de créer une demande
      allow create: if true;
      
      // Seul l'administrateur peut modifier ou supprimer les demandes
      allow update, delete: if isAuthenticated() && 
                            request.auth.token.email == "support@javachrist.fr";
    }
  }
} 